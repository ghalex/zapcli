import clc from 'cli-color'
import { Command } from 'commander'
import * as fs from 'node:fs'
import * as path from 'node:path'
import { Env } from 'zplang'
import loadConfig from '../config'
import * as api from '../api'
import dayjs from 'dayjs'

const program = new Command('execute')

export default () => {
  program
    .usage('<file> [options]')
    .description('execute a .zp or .js automation file and display the orders generated by the code')
    .argument('file', 'file to execute')
    .option('-d, --date <date>', 'date to execute the file')
    .option('-o, --orders <orders>', 'orders output file')
    .option('-r, --result <result>', 'result output file')
    .option('-e, --errors <errors>', 'errors output file')
    .option('-c, --configDir <configDir>', 'config directory')
    .option('-a, --auto', 'don\'t prompt confirmation prompts')
    .action(async (file, opts) => {

      try {
        console.log(clc.cyanBright(`→ Executing file: `) + clc.underline(file) + '\n')

        const config = await loadConfig(opts.configDir)
        const extension = path.extname(file)
        const lang = extension === '.js' ? 'js' : 'zp'
        const code = api.code().readCode(file)
        const requirements = api.code().getRequirements(code, lang, config.execute?.inputs?.openPositions ?? [], config.execute?.inputs ?? {})

        opts.date = opts.date ?? config.execute?.date ?? undefined // dayjs().endOf('day').format('YYYY-MM-DD')
        opts.errors = opts.errors ?? config.execute?.errors ?? undefined
        
        const bars = await api.data(config).downloadBars(requirements.symbols, requirements.maxWindow, requirements?.settings?.timeframe ?? 1440, opts.date, opts.auto)
        let result = api.code().runCode(code, lang, bars, config.execute?.inputs ?? {})

        console.log(`${clc.green('✔ Success:')} Code was executed successfully`)
        console.log(`${clc.green('✔ Execution time:')} ${clc.bold(result.time.toFixed(2))} seconds\n`)

        if (opts.orders) {
          const filePath = path.join(process.cwd(), opts.orders)
          console.log(clc.cyanBright(`→ Saving orders to file: `) + clc.underline(filePath))

          fs.writeFileSync(filePath, JSON.stringify(result.orders, null, 2))
          console.log(`${clc.green('✔ Success:')} Orders saved successfully\n`)
        }

        if (opts.result) {
          const filePath = path.join(process.cwd(), opts.result)
          console.log(clc.cyanBright(`→ Saving result to file: `) + clc.underline(filePath))

          fs.writeFileSync(filePath, JSON.stringify(result, null, 2))
          console.log(`${clc.green('✔ Success:')} Result saved successfully\n`)
        }

        if (result.stdout) {
          console.log(clc.cyanBright(`→ Output: `))
          console.log(result.stdout.split('\n').map(l => clc.xterm(8)(l)).join('\n'))
        }

      } catch (e: any) {
        const errorFilePath = path.join(process.cwd(), opts.errors)
        console.log(clc.red(`✖ Error executing file: ${clc.underline(file)}`))
        console.log(clc.cyanBright(`→ Saving error to file: `) + clc.underline(errorFilePath) + '\n')

        fs.writeFileSync(errorFilePath, e.toString())
        // console.log(`${clc.red('✔ Error:')} Result saved successfully\n`)

        // if (opts.errors) {
        //   console.error(e)
        // }
        // console.error(clc.red(`Error: ${e.message}`))
      }

    })

  return program
}