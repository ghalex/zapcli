doctype html
html
    head
        title Report
        script(src="https://cdn.tailwindcss.com")
        style.
            body {
                background-color: #fbfcfe;
            }
            figure {
                margin: 0;
                padding: 8px;
                display: flex;
                flex-direction: column;
                align-items: center;
                border: 1px solid #e1e1e2;
                border-radius: 8px;
            }
            figure h2 {
                font-size: 1.5rem;
                text-align: center;
                margin-bottom: 4px;
            }
    body
        div.p-8.bg-white.shadow
            h1.text-4xl.mb-1 Backtest Report
            p.text-sm
                b Date generated:
                span#date
            p.text-sm
                b File:
                span#file
            p.text-sm
                b Start Cash:
                span#cash1
            p.text-sm
                b End Cash:
                span#cash2
        hr
        div#container.grid.grid-cols-2.p-4.gap-4.container.mx-auto
        script(type="importmap").
            {
                "imports": {
                    "@observablehq/plot": "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm",
                    "@zapcli/reports": "./../../../reports/dist/zapcli-reports.es.js"
                }
            }
        script(type="module").
            import * as Plot from "@observablehq/plot"
            import renderReport from "@zapcli/reports"
            const formatNumber = (val) => {
                if (val >= 1000) {
                    const formattedValue = (val / 1000).toFixed(1);
                    return `$${formattedValue}k`;
                } else {
                    const op = {
                        style: 'currency',
                        currency: 'USD',
                        maximumFractionDigits: 3
                    }
                    return val.toLocaleString('en-US', op)
                }
            }
            const container = document.querySelector("#container")
            fetch('./data.json')
                .then(response => response.json())
                .then(data => {
                    run(data)
                })
                .catch(error => console.error(error))

            function run(data) {
                const plots = Object.keys(data.analyzers).map(name => renderReport(name, data.analyzers[name])).flat()
                plots.forEach(plot => {
                    plot.classList.add(..."shadow bg-white".split(" "))
                    container.append(plot)
                })
                document.getElementById('file').textContent = data.file;
                document.getElementById('cash1').textContent = data.startCash;
                document.getElementById('cash2').textContent = data.endCash;
                document.getElementById('date').textContent = data.dateGenerated
            }